.acf-field-group[data-name="social-links"] > .acf-label,
.acf-field-group[data-name="hero-content"] > .acf-label,
.acf-field-group[data-name="hero-background"] > .acf-label {
	display: none;
}

.acf-field-group[data-name="social-links"] .acf-fields.-border,
.acf-field-group[data-name="hero-content"] .acf-fields.-border,
.acf-field-group[data-name="hero-background"] .acf-fields.-border {
	border: none;
}

.acf-field-group[data-name="social-links"] .acf-fields > .acf-field,
.acf-field-group[data-name="hero-content"] .acf-fields > .acf-field,
.acf-field-group[data-name="hero-background"] .acf-fields > .acf-field {
	border: 0;
	padding-left: 0;
	padding-right: 0;
	padding-top: 0;
}

.acf-field-group[data-name="social-links"] .acf-fields > .acf-field:last-child,
.acf-field-group[data-name="hero-content"] .acf-fields > .acf-field:last-child,
.acf-field-group[data-name="hero-background"] .acf-fields > .acf-field:last-child {
	padding-bottom: 0;
}

.acf-fc-layout-handle small {
	color: #ccd0d4;
}

.acf-field-group[data-name="background"] .acf-fields.-border {
	border: none;
}

.acf-field-group[data-name="background"] .acf-fields > .acf-field {
	border: 0;
	padding-left: 0;
	padding-right: 0;
	padding-top: 0;
}

.acf-field-group[data-name="background"] .acf-fields > .acf-field:last-child {
	padding-bottom: 0;
}

.acf-field-group[data-name="background"] .acf-fields > .acf-field-select[data-name="type"] .acf-label {
	display: none;
}

.acf-field-google-map .acf-label {
	display: none;
}

.acf-table tr.acf-row:nth-child(even) td.acf-row-handle {
	background: #eaeaea;
}

.acf-table tr.acf-row:nth-child(even) td.acf-fields {
	background: #f7f7f7;
}

.select2-results__option img {
	display: inline-block;
	height: 16px;
	margin: -2px 10px 0 0;
	vertical-align: middle;
	width: 16px;
}

.select2-results__option span {
	display: inline-block;
	height: 20px;
	margin-right: 10px;
	vertical-align: middle;
	width: 20px;
}

.select2-results__option span.white {
	background: #fff;
}

.select2-results__option span.black {
	background: #000;
}

.select2-results__option span.primary {
	background: #ff784d;
}

.select2-results__option span.secondary {
	background: #b1d9db;
}

.select2-results__option span.lighter {
	background: #f0f2f2;
}

.select2-results__option span.light {
	background: #dfe4e6;
}

.select2-results__option span.gray {
	background: #8a9294;
}

.select2-results__option span.dark {
	background: #4e5354;
}

.select2-results__option span.darker {
	background: #292c2d;
}


/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
